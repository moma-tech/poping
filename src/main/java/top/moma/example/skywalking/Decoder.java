package top.moma.example.skywalking;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Decoder {

  public static void main(String[] args) {
    // bXg6Om5wOjp3YWxsZXQtc2VydmljZQ==
    // 8f95df66735174258b6ab27b1af632e3f.43594.16607437861292443
    String content =
        "";
    //String content = "bXg6Om5wOjp0b29scy13ZWI=";
    String a = new String(Base64.getDecoder().decode(content), StandardCharsets.UTF_8);
    System.out.println(a);
    String text = "co::co::card";
    String b = new String(Base64.getEncoder().encode(text.getBytes(StandardCharsets.UTF_8)));
    System.out.println(b);
  }
}
